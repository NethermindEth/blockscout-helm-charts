# Default values for sig-provider.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

sigProvider:
  replicaCount: 2

  image:
    repository: ghcr.io/blockscout/sig-provider
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"

  podAnnotations: {}
  podLabels: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 8043

  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hostname: sig-provider.local
    tls:
      enabled: false

  env: []
    # NAME: VALUE

  resources:
    limits:
      memory: 256Mi
      cpu: 250m
    requests:
      memory: 128Mi
      cpu: 100m

  livenessProbe:
    httpGet:
      path: /health?service=
      port: http
  readinessProbe:
    httpGet:
      path: /health?service=
      port: http

  # Additional volumes on the output Deployment definition.
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # Additional volumeMounts on the output Deployment definition.
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

smartContractVerifier:
  replicaCount: 2

  image:
    repository: ghcr.io/blockscout/smart-contract-verifier
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"

  podAnnotations: {}
  podLabels: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 8050
  grpc:
    enabled: true
    port: 8051
    #GRPC ingress configuration
    ingress:
      enabled: false
      className: ""
      annotations: {}
        # kubernetes.io/ingress.class: nginx
        # kubernetes.io/tls-acme: "true"
      hostname: grpc-smart-contract-verifier.local
      tls:
        enabled: false
  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hostname: smart-contract-verifier.local
    tls:
      enabled: false

  env: []
    # NAME: VALUE
  envFromSecret: []
    # NAME: VALUE

  resources:
    limits:
      memory: "8Gi"
      cpu: "1"
    requests:
      memory: "1Gi"
      cpu: "250m"

  livenessProbe:
    httpGet:
      path: /health?service=
      port: http
  readinessProbe:
    httpGet:
      path: /health?service=
      port: http

  # Additional volumes on the output Deployment definition.
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # Additional volumeMounts on the output Deployment definition.
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true
ethBytecodeDb:
  enabled: false
  replicaCount: 1

  image:
    repository: ghcr.io/blockscout/eth-bytecode-db
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"

  podAnnotations: {}
  podLabels: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 8050

  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hostname: eth-bytecode-db.local
    tls:
      enabled: false

  env: []
    # NAME: VALUE
  envFromSecret: []
    # NAME: VALUE
  resources:
    limits:
      memory: 1Gi
      cpu: 500m
    requests:
      memory: 512Mi
      cpu: 250m

  livenessProbe:
    httpGet:
      path: /health?service=
      port: http
    initialDelaySeconds: 100
    periodSeconds: 100
    timeoutSeconds: 30
  readinessProbe:
    httpGet:
      path: /health?service=
      port: http
    initialDelaySeconds: 100
    periodSeconds: 100
    timeoutSeconds: 30

  # Additional volumes on the output Deployment definition.
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # Additional volumeMounts on the output Deployment definition.
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true


metrics:
  enabled: false
  port: 6060
  prometheus:
    enabled: false

nodeSelector: {}

tolerations: []

affinity: {}
